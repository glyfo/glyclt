#!/bin/bash

#####################################################################################
# Copyright Glyfo Company. 2020. All Rights Reserved.                               #
# Apache License, Version 2.0. See LICENSE file in the project root for details.    #
# name    : Command Line Tool to deploy Smart Contract on Solana                    #
# website : glyfo.com                                                               #
# support : hello@glyfo.com                                                         #
#####################################################################################

# ---------------------- TIPS -------------------------------
#   export PATH=$_path - variable _path is a global var 
#   echo $PWD          -  regular dollar char for outer (i.e. local) variables, e.g. 
#   echo \$PWD         -  escaped dollar char for inner (i.e. remote) variables, e.g.


SOLANA_VERSION=v1.9.5
ANCHOR_VERSION=v0.20.1
SOLANA_CHAIN="http://localhost:8899"
WALLET_FILE="/usr/local/solana/walletid.json"


## ----------------------  GLOBAL --------------------------
_path="/usr/local/solana/bin:/usr/local/cargo/bin:/bin:/usr/bin:/root/.local/share/solana/install/active_release/bin"

b=$(tput bold)
n=$(tput sgr0)

## ----------------------  UTIL FUNCTION ---------------------

call2cmd () {
   docker exec -i solanaX /bin/bash -s <<EOF 
   export PATH=$_path
   $1
   exit
EOF
}

version () {
   echo "glyclt 0.0.2"
}

help () {
   echo "${n} Usage: ${b} glyclt ${n}

${b}+ setup${n}         : Handler Container to Compile & Install Software 
     + solana   : Compile & Install Solana Tools & Node into Container
     + anchor   : Compile & Install Anchor into Container
     + dev      : Install Node,NPM and Yarn into the Container
     + login    : Access to Container 
     + reset    : Restart Container ( Stop & Start ) 
     + delete   : Delete Container
${b}+ locnet${n}        : Handler Solana Local Chain
     + run      : Run Solana Local Chain
     + info     : Info of Solana Local Chain
     + status   : Validate if Solana Local Chain is Running
     + restart  : Stop & Start Solana Local Chain
     + log      : View Solana Local Chain Logger
     + reset    : Delete Data of Solana Local Chain 
${b}+ wallet${n}        : Handler Wallet 
     + create   : Create Main Wallet and Save into the Container
     + airdrop  : Add SOL to Main Wallet
     + balance  : Review Main Wallet Balance
${b}+ anchor${n}        : Solana FrameWork 
     + init     : Create Project Folder 
     + build    : Compile Program
     + deploy   : Deploy Program on Solana Test Node
     + test     : Running Test 
${n} "
 
}


## ----------------------  BEGIN SETUP --------------------------
if [ "$1" = "setup" ]
then
   case "$2" in 
   'solana')
   docker stop solanaX
   docker rm solanaX
   docker pull rust
   docker run  --name solanaX -v $(pwd):/usr/src -w /usr/src -id rust  tail -f /dev/null
   docker exec -i solanaX /bin/bash -s <<EOF
          echo '----------------------- Core Tool--------------------------' 
          uname -a
          apt-get -qq update 
          apt-get -qq upgrade 
          apt-get -qq install -y pkg-config build-essential libudev-dev libclang-dev net-tools --no-install-recommends apt-utils
          rustup component add rustfmt
          export PATH=$_path
          echo '----------------------- Core Tool Version --------------------------' 
          rustc -V 
          cargo -V
          git --version
          echo '----------------------- Building Solana ----------------------------'
          sleep 1
          cd /usr/local 
          git -c advice.detachedHead=false clone -b $SOLANA_VERSION  https://github.com/solana-labs/solana
          cd solana
          sed '7,13d' ./scripts/cargo-install-all.sh > ./scripts/cargo-install-all-fix.sh
          sed '6 a cargo=cargo' ./scripts/cargo-install-all-fix.sh > ./scripts/cargo-install-all-fix2.sh
          cat ./scripts/cargo-install-all-fix2.sh > ./scripts/cargo-install-all-fix.sh 
          rm  ./scripts/cargo-install-all-fix2.sh
          bash ./scripts/cargo-install-all-fix.sh --validator-only .
          cargo build --release --bin solana-test-validator
          cp /usr/local/solana/target/release/solana-test-validator /usr/local/solana/bin/
          export PATH="/usr/local/solana/bin:/bin:/usr/local/cargo/bin:/usr/bin:/root/.local/share/solana/install/active_release/bin"
          echo '----------------------- Solana Tool Version --------------------------' 
          solana -V
          solana-keygen --version
          solana-test-validator --version
          exit
EOF
   exit
;;
   'anchor')
   docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   cd /usr/local 
   echo '----------------------- Building Anchor --------------------'
   cargo install --git https://github.com/project-serum/anchor --tag $ANCHOR_VERSION anchor-cli  --locked
   exit
EOF
   exit
;;
   'dev')
    docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   echo '----------------------- Installing NPM --------------------'
   curl -fsSL https://deb.nodesource.com/setup_16.x | bash - > /dev/null
   apt-get -qq install -y nodejs
   npm install --global yarn
   node --version
   npm  --version 
   yarn --version
   exit
EOF
   exit
;;
   'login')
    docker exec -it solanaX /bin/bash 
    exit   
;;
   'reset')
    echo "Stop Container"
    docker stop  $(docker ps -a |grep solanaX |awk '{ print $1 }' )
    echo "Start Container"
    docker start $(docker ps -a |grep solanaX |awk '{ print $1 }' )
    exit
;;
   'delete')
    echo "Delete Container Enviroment"
    docker stop solanaX
    docker rm solanaX
    exit
;;
   'release')
    docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   echo '----------------------- Release  --------------------'
   echo  "rustc          $(rustc -V |awk '{ print $2 }' )"
   echo  "cargo          $(cargo -V |awk '{ print $2 }' )"
   echo  "solana         $(solana -V |awk '{ print $2 }' )"
   echo  "solana-keygen  $(solana-keygen -V |awk '{ print $2 }' )"
   echo  "node           $(node --version |awk '{ print $1 }' )"  
   echo  "npm            $(npm --version |awk '{ print $1 }' )"  
   echo  "yarn           $(yarn --version |awk '{ print $1 }' )"  
   exit
EOF
   exit
;;
   *) 
   echo "${n} Usage: ${b} glyclt setup ${n}

  + solana   : Compile & Install Solana Tools & Node into Container
  + anchor   : Compile & Install Anchor into Container
  + dev      : Install Node,NPM and Yarn into the Container
  + login    : Access to Container 
  + reset    : Restart Container ( Stop & Start ) 
  + delete   : Delete Container
  "
  exit
;; 
esac
fi

## ----------------------  END SETUP ----------------------------

## ----------------------  BEGIN ANCHOR -------------------------

if [ "$1" = "anchor" ]
then
   case "$2" in 
   'init')
   call2cmd "anchor init hello"
   ;;
   'build')
   echo "Building Smart Contract .........."
   docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   export RUST_BACKTRACE=full
   cd counter
   cargo build-bpf 
   anchor idl parse -f src/lib.rs -o target/idl/rcp-mapping.json
   exit
EOF   
   exit
;;
   'deploy')
   echo "Deploy  .........."
   docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   cd counter
   solana program deploy -k /usr/local/solana/walletid.json  target/deploy/counter.so --url https://api.devnet.solana.com 
   exit
EOF
   exit
;;
esac
fi

## ----------------------  END ANCHOR -------------------------



## ----------------------  BEGIN WALLET -------------------------

if [ "$1" = "wallet" ]
then
   case "$2" in 
   'create')
   docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   solana config set --url $SOLANA_CHAIN > /dev/null 
   solana-keygen new -f -s --no-bip39-passphrase --outfile $WALLET_FILE  > /dev/null
   echo '-----------------------Public Key ------------------------'
   solana-keygen pubkey $WALLET_FILE 
   echo '----------------------------------------------------------'
   echo '-----------------------Private Key -----------------------'
   cat $WALLET_FILE   
   echo '----------------------------------------------------------'
   exit
EOF
exit
;;
   'airdrop')
   docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path 
   solana-keygen pubkey $WALLET_FILE > /usr/local/xtmp 
   cat /usr/local/xtmp
   exit 
EOF
exit
;;
   'balance')
   docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path 
   solana-keygen pubkey $WALLET_FILE | { read pubkey ; echo "PK :$pubkey" }
   solana-keygen pubkey $WALLET_FILE | { read pubkey ; solana balance $pubkey $WALLET_FILE --url $SOLANA_CHAIN; }
   solana airdrop 5 $(cat /usr/local/xtmp ) $WALLET_FILE --url $SOLANA_CHAIN
   exit 
EOF
exit
;;
esac
fi

## ----------------------  END WALLET -------------------------

## ----------------------  BEGIN LOCNET -------------------------

if [ "$1" = "locnet" ]
then
   case "$2" in 
  'run')
   docker exec -i solanaX /bin/bash -s <<EOF 
   export PATH=$_path
   cd /usr/local/solana
   if nohup solana-test-validator > /dev/null 2>&1 &
   then
    echo "[OK] Solana Local Chain"
   else
    echo "[NOK] Solana Local Chain"
   fi
   exit
EOF
exit
;;
  'status')
   docker exec -i solanaX /bin/bash -s <<EOF 
   export PATH=$_path
   if ps ax | grep -v grep | grep solana > /dev/null
   then
    echo "[OK] Solana Local Chain"
   else
    echo "[NOK] Solana Local Chain"
   fi
   exit
EOF
exit
;;
  'reset')
   docker exec -i solanaX /bin/bash -s <<EOF 
   export PATH=$_path
   rm -rf /usr/local/solana/test-ledger
   if killall $(ps -fea | grep solana)
   then
    echo "[OK] Solana Local Chain"
   else
    echo "[NOK] Solana Local Chain"
   fi   
   exit
EOF
exit
;;
   'log')
   docker exec -i solanaX /bin/bash -s <<EOF 
   export PATH=$_path
   tail -30 /usr/local/solana/test-ledger/validator.log
   exit
EOF
exit
;;
   'info')
   docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   solana program show --buffers --all --keypair $WALLET_FILE --url $SOLANA_CHAIN
   exit
EOF
exit
;;
esac
fi

## ----------------------  END LOCNET -------------------------


## ----------------------  MAIN  ------------------------------

case "$1" in
'help')
help 
;; 
'version')
version 
;; 
*)
help 
;;
esac
