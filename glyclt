#!/bin/bash

#####################################################################################
# Copyright Glyfo Company. 2022. All Rights Reserved.                               #
# Apache License, Version 2.0. See LICENSE file in the project root for details.    #
# name    : Command Line Tool to deploy Smart Contract on Solana                    #
# website : glyfo.com                                                               #
# support : hello@glyfo.com                                                         #
#####################################################################################

# ---------------------- TIPS -------------------------------
#   echo $PWD          -  regular dollar char for outer (i.e. local) variables, e.g. 
#   echo \$PWD         -  escaped dollar char for inner (i.e. remote) variables, e.g.


SOLANA_VERSION=v1.9.5
ANCHOR_VERSION=v0.21.0
SOLANA_CHAIN="http://localhost:8899"
MASTER_WALLET="/usr/local/solana/master_wallet.json"
ALFA_WALLET="/usr/local/solana/alfa_wallet.json"
BETA_WALLET="/usr/local/solana/beta_wallet.json"i

## ----------------------  GLOBAL --------------------------
_path="/usr/local/solana/bin:/usr/local/cargo/bin:/bin:/usr/bin"

b=$(tput bold)
n=$(tput sgr0)

## ----------------------  UTIL FUNCTION ---------------------

call2cmd () {
   docker exec -i solanaX /bin/bash -s <<EOF 
   export PATH=$_path
   $1
   exit
EOF
}

echo_help () {
   echo "${n} Usage: ${b} glyclt ${n} v0.2.1 "
   echo_setup 
   echo_wallet 
   echo_localnet 
   echo_program  
   echo ""
   exit
}

echo_setup () {
echo "${b}+ setup${n}         : Handler Container to Compile & Install Software 
     + solana   : Compile & Install Solana Tools & Node into Container
     + anchor   : Compile & Install Anchor into Container
     + dev      : Install Node,NPM and Yarn into the Container
     + login    : Access to Container 
     + reset    : Restart Container ( Stop & Start ) 
     + delete   : Delete Container"
}

echo_localnet () {
echo "${b}+ localnet${n}        : Handler Solana LocalNet Chain
     + run      : Run Solana LocalNet Chain
     + info     : Info of Solana LocalNet Chain
     + status   : Validate if Solana LocalNet Chain is Running
     + restart  : Stop & Start Solana LocalNet Chain
     + log      : View Solana LocalNet Chain Logger
     + reset    : Delete Data of Solana LocalNet Chain"
}

echo_wallet () {
echo "${b}+ wallet${n}        : Handler Wallet 
     + create   : Create Master & Alfa & Beta Wallet
     + airdrop  : Add SOL to  Wallet
     + balance  : Review Wallet Balance"     
}

echo_program () {
echo "${b}+ program${n}        : Handler Anchor Solana FrameWork  
     + init     : Create Project using clone repo ( https://github.com/glyfo/counter )   
     + build    : Compile  Program
     + deploy   : Deploy Program on Solana LocalNet Chain
     + test     : Running Test"     
}


## ----------------------  BEGIN SETUP --------------------------
if [ "$1" = "setup" ]
then
   case "$2" in 
   solana)
   docker stop solanaX
   docker rm solanaX
   docker pull rust
   docker run  --name solanaX -v $(pwd):/usr/src -w /usr/src -id rust  tail -f /dev/null
   docker exec -i solanaX /bin/bash -s <<EOF
          echo '----------------------- Core Tool--------------------------' 
          uname -a
          apt-get -qq update 
          apt-get -qq upgrade 
          apt-get -qq install -y pkg-config build-essential libudev-dev libclang-dev net-tools --no-install-recommends apt-utils
          rustup component add rustfmt
          export PATH=$_path
          echo '----------------------- Core Tool Version --------------------------' 
          rustc -V 
          cargo -V
          git --version
          echo '----------------------- Building Solana ----------------------------'
          sleep 1
          cd /usr/local 
          git -c advice.detachedHead=false clone -b $SOLANA_VERSION  https://github.com/solana-labs/solana
          cd solana
          sed '7,13d' ./scripts/cargo-install-all.sh > ./scripts/cargo-install-all-fix.sh
          sed '6 a cargo=cargo' ./scripts/cargo-install-all-fix.sh > ./scripts/cargo-install-all-fix2.sh
          cat ./scripts/cargo-install-all-fix2.sh > ./scripts/cargo-install-all-fix.sh 
          rm  ./scripts/cargo-install-all-fix2.sh
          bash ./scripts/cargo-install-all-fix.sh .
          cp /usr/local/solana/target/release/solana-test-validator /usr/local/solana/bin/
          export PATH="/usr/local/solana/bin:/bin:/usr/local/cargo/bin:/usr/bin"
          echo '----------------------- Solana Tool Version --------------------------' 
          solana -V
          solana-keygen --version
          solana-test-validator --version
          exit
EOF
   exit
;;
   anchor)
   docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   cd /usr/local 
   echo '----------------------- Building Anchor --------------------'
   cargo install --git https://github.com/project-serum/anchor --tag $ANCHOR_VERSION anchor-cli  --locked
   exit
EOF
   exit
;;
   dev)
    docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   echo '----------------------- Installing Developer Tools --------------------'
   curl -fsSL https://deb.nodesource.com/setup_16.x | bash - > /dev/null
   apt-get -qq install -y nodejs
   npm i -g yarn                        > /dev/null
   npm i -g @types/node                 > /dev/null
   npm i -g @project-serum/anchor-cli   > /dev/null
   node --version
   npm  --version 
   yarn --version
   exit
EOF
   exit
;;
   login)
    docker exec -it solanaX /bin/bash 
    exit   
;;
   reset)
    echo "Stop Container"
    docker stop  $(docker ps -a |grep solanaX |awk '{ print $1 }' )
    echo "Start Container"
    docker start $(docker ps -a |grep solanaX |awk '{ print $1 }' )
    exit
;;
   delete)
    echo "Delete Container Enviroment"
    docker stop solanaX
    docker rm solanaX
    exit
;;
   release)
    docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   echo '----------------------- Release  --------------------'
   echo  "rustc          $(rustc -V |awk '{ print $2 }' )"
   echo  "cargo          $(cargo -V |awk '{ print $2 }' )"
   echo  "solana         $(solana -V |awk '{ print $2 }' )"
   echo  "solana-keygen  $(solana-keygen -V |awk '{ print $2 }' )"
   echo  "solana-test-validator  $(solana-test-validator --version |awk '{ print $2 }' )"
   echo  "node           $(node --version |awk '{ print $1 }' )"  
   echo  "npm            $(npm --version |awk '{ print $1 }' )"  
   echo  "yarn           $(yarn --version |awk '{ print $1 }' )"  
   exit
EOF
   exit
;;
   *) 
   echo "hola"
   exit
;; 
esac
fi

## ----------------------  END SETUP ----------------------------

## ----------------------  BEGIN ANCHOR -------------------------

if [ "$1" = "anchor" ]
then
   case "$2" in 
   init)
   echo -n "Project Name: " 
   read _what
   docker exec -i solanaX /bin/bash -s <<EOF 
   export PATH=$_path
   anchor init $_what
   exit
EOF
   exit
;;
   build)
   docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   export RUST_BACKTRACE=full
   export ANCHOR_WALLET=$MASTER_WALLET
   home=$(pwd | sed 's#.*/##')
   echo "Proyect:\$home"
   cd /usr/src/\$home
   rm -rf target 
   anchor build
   exit
EOF
   exit
;;
   deploy)
   docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   export RUST_BACKTRACE=full
   export ANCHOR_WALLET=$MASTER_WALLET
   home=$(pwd | sed 's#.*/##')
   echo "Proyect:\$home"
   cd /usr/src/\$home
   solana program deploy --keypair $MASTER_WALLET --url $SOLANA_CHAIN /usr/src/\${home}/target/deploy/\${home}.so 
   exit
EOF
   exit
;;
   test)
   docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   export RUST_BACKTRACE=full
   export ANCHOR_WALLET=$MASTER_WALLET
   home=$(pwd | sed 's#.*/##')
   echo "Proyect:\$home"
   cd /usr/src/\$home
   anchor test
   exit
EOF
   exit
;;
   *) 
   exit
esac
fi

## ----------------------  END ANCHOR -------------------------



## ----------------------  BEGIN WALLET -------------------------

if [ "$1" = "wallet" ]
then
   case "$2" in 
   create)
   docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   solana config set --url $SOLANA_CHAIN > /dev/null 
   solana-keygen new -f -s --no-bip39-passphrase --outfile $MASTER_WALLET  > /dev/null
   solana-keygen new -f -s --no-bip39-passphrase --outfile $WALLET_MOON > /dev/null
   solana-keygen new -f -s --no-bip39-passphrase --outfile $WALLET_SUN  > /dev/null
   echo '-----------------------Public Key DAD  ------------------------'
   solana-keygen pubkey $MASTER_WALLET 
   echo '-----------------------Public Key MOON ------------------------'
   solana-keygen pubkey $WALLET_MOON 
   echo '-----------------------Public Key SUN  ------------------------'
   solana-keygen pubkey $WALLET_SUN 
   exit
EOF
exit
;;
   airdrop)
   docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path 
   solana-keygen pubkey $MASTER_WALLET | awk -v wallet="${MASTER_WALLET}" -v chain="${SOLANA_CHAIN}"  \
  '{ print "PK:" \$1;print ""; system("exec /usr/local/solana/bin/solana airdrop 5 " \$1   " --url " chain ) }'
   exit
EOF
exit
;;
   balance)
   echo -n "Balance | DAD(D) | MOON(M) | SUN(S) : " 
   read _who
   if [ $_who = "D" ]
   then
       WALLET=$MASTER_WALLET
   elif [ $_who = "M" ]
   then 
       WALLET=$WALLET_MOON
   elif [ $_who = "S" ]
   then 
       WALLET=$WALLET_SUN
   else 
     echo -n "Please | DAD(D) | MOON(M) | SUN(S)"
     exit 
   fi

   docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   solana-keygen pubkey $WALLET | awk  -v wallet="${WALLET}" -v chain="${SOLANA_CHAIN}"  \
   '{ print "PK:" \$1; system("exec /usr/local/solana/bin/solana balance " \$1 " --url " chain ) }'
   exit 
EOF
exit
;;
   *) 
   exit
esac
fi

## ----------------------  END WALLET -------------------------

## ----------------------  BEGIN LOCALNET -------------------------

if [ "$1" = "localnet" ]
then
   case "$2" in 
  run)
   docker exec -i solanaX /bin/bash -s <<EOF 
   export PATH=$_path
   cd /usr/local/solana
   if nohup solana-test-validator > /dev/null 2>&1 &
   then
    sleep 3
    echo "[OK] Solana Local Chain is Running"
   else
    echo "[NOK] Solana Local Chain"
   fi
   exit
EOF
exit
;;
  'status')
   docker exec -i solanaX /bin/bash -s <<EOF 
   export PATH=$_path
   if ps ax | grep -v grep | grep solana > /dev/null
   then
    echo "[OK] Solana Local Chain is Running"
   else
    echo "[NOK] Solana Local Chain"
   fi
   exit
EOF
exit
;;
  'reset')
   docker exec -i solanaX /bin/bash -s <<EOF 
   export PATH=$_path
   rm -rf /usr/local/solana/test-ledger
   if killall $(ps -fea | grep solana)
   then
    echo "[OK] Solana Local Chain Reset"
   else
    echo "[NOK] Solana Local Chain"
   fi   
   exit
EOF
exit
;;
   'log')
   docker exec -i solanaX /bin/bash -s <<EOF 
   export PATH=$_path
   tail -30 /usr/local/solana/test-ledger/validator.log
   exit
EOF
exit
;;
   'info')
   docker exec -i solanaX /bin/bash -s <<EOF
   export PATH=$_path
   solana program show --buffers --all --keypair $MASTER_WALLET --url $SOLANA_CHAIN
   exit
EOF
exit
;;
   *) 
   exit
esac
fi

## ----------------------  END LOCALNET -------------------------


## ----------------------  MAIN  ------------------------------

case "$1" in
help)
echo "help"
;; 
version)
echo "version"
;; 
*)
echo_help
;;
esac
